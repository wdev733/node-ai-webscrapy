{"version":3,"sources":["../../../src/service/scrape/scrape.js"],"names":["scrapeWebsite","url","result","success","data","siteUrl","toLowerCase","startsWith","homeDocument","pageUrl","pattern","description","page","attr","aboutDocument","Object","keys","forEach","key","$","patternArray","i","length","patternElement","value","get","selector","text","target","manyValue","each","index","item","push"],"mappings":"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","file":"scrape.js","sourcesContent":["import fetchHtml from './fetch';\n\nimport { pattern } from '../../constants'\n\nconst scrapeWebsite = async (url) => {\n  \n  var result = {\n    success: true,\n    data: {\n\n    }\n  };\n\n  let siteUrl = url;\n  if (!siteUrl.toLowerCase().startsWith(\"https\")) {\n    siteUrl = 'https://' + siteUrl;\n  }\n\n  const homeDocument = await fetchHtml(siteUrl);\n\n  let pageUrl = homeDocument(pattern.description.page).attr('href');\n  if (!pageUrl.toLowerCase().startsWith(\"http\") && !pageUrl.toLowerCase().startsWith(\"https\")) {\n    pageUrl = siteUrl + pageUrl;\n  }\n  const aboutDocument = await fetchHtml(pageUrl);\n\n  await Object.keys(pattern).forEach(async (key) => {\n    \n    let page = pattern[key].page;\n    if (page !== 'self') {\n      var $ = aboutDocument;\n    } else {\n      var $ = homeDocument;\n    }\n\n    // get pattern list\n    const patternArray = pattern[key].pattern;\n\n    // for each patterns .....\n    for (let i = 0; i < patternArray.length; i++) {\n\n      let patternElement = patternArray[i];\n\n      let value = '';\n\n      // console.log(patternElement);\n\n      if (pattern[key].get === 'one') {   // if get data from only first matched element \n        \n        if (pattern[key].selector === 'text') {   // $(xxx).text()\n          value = $(patternElement).text();\n        }\n        if (pattern[key].selector === 'attribute') {\n          value = $(patternElement).attr(pattern[key].target);\n          if (value !== '' && value !== 'undefined') {\n            if (!value.toLowerCase().startsWith(\"http\") && !value.toLowerCase().startsWith(\"https\")) {\n              value = siteUrl + value;\n            }\n          }\n        }\n\n      } else if (pattern[key].get === 'many') {   // get all value from elements which are matched by pattern\n        \n        let manyValue = [];\n        $(patternElement).each((index, item) => {\n          \n          if (pattern[key].selector === 'text') {\n            if ($(item).text() !== '' && $(item).text() != 'undefined') {\n              manyValue.push($(item).text());\n            }\n          }\n          \n          if (pattern[key].selector === 'attribute') {\n            manyValue.push($(item).attr(pattern[key].target));\n          }\n\n        });\n        // console.log(manyValue);\n        value = manyValue;\n      }\n\n      if (value !== 'undefined' && value !== '') {    // if get data ?\n        result.data[key] = value;\n        break;\n      }\n\n    }\n  })\n  return result;\n}\n\nexport default scrapeWebsite;"]}